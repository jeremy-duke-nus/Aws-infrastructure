AWSTemplateFormatVersion: 2010-09-09
Description: >
  This template creates the security infrastructure for the AWS environment, leveraging on AWS Inspector to 
  scan ECR, EC2 and Lambda functions for vulnerabilities.

Resources:
  KmsKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: inspector-kms-key-policy
        Statement:
          - Sid: "Enable IAM user permissions"
            Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Sid: "Allow Inspector to use key"
            Effect: "Allow"
            Principal:
              Service: "inspector2.amazonaws.com"
            Action:
              - kms:GenerateDataKey
              - kms:Decrypt
            Resource: "*"
            Condition:
              StringEquals:
                "aws:SourceAccount": !Sub "${AWS::AccountId}"
              ArnLike:
                "aws:SourceArn": !Sub "arn:aws:inspector2:${AWS::Region}:${AWS::AccountId}:report/*"

  KmsAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/InspectorKey-Cldfmn
      TargetKeyId: !Ref KmsKey
  InspectorResultsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "security-${AWS::AccountId}-${AWS::Region}"

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref InspectorResultsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: inspector2.amazonaws.com
            Action:
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:AbortMultipartUpload
            Resource:
              - !Sub "${InspectorResultsBucket.Arn}/*"
            Condition:
              StringEquals:
                "aws:SourceAccount": !Sub ${AWS::AccountId}
              ArnLike:
                "aws:SourceArn": !Sub "arn:aws:inspector:${AWS::Region}:${AWS::AccountId}:report/*"

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "InspectorRole-${AWS::Region}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub CreateFindingReport-${AWS::Region}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - inspector2:CreateFindingsReport
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - !Sub "arn:aws:s3:::security-${AWS::AccountId}-${AWS::Region}/*"

  GenerateFindingReport:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "GenerateFindingReport-${AWS::Region}"
      Runtime: python3.12
      MemorySize: 128
      Role: !GetAtt
        - LambdaRole
        - Arn
      Handler: index.lambda_handler
      Timeout: 60
      Environment:
        Variables:
          S3_BUCKET: !Sub "security-${AWS::AccountId}-${AWS::Region}"
          KMS_KEY: !GetAtt KmsKey.Arn
      Code:
        ZipFile: |
          import boto3
          from datetime import datetime
          import json
          import os

          inspector2_client = boto3.client('inspector2')

          def lambda_handler(event, context):
            report_bucket = os.getenv('S3_BUCKET')
            kms_key = os.getenv('KMS_KEY')
            response = inspector2_client.create_findings_report(
                                            reportFormat='JSON',
                                            s3Destination={
                                              'bucketName': report_bucket,
                                              'kmsKeyArn': kms_key,
                                              'keyPrefix': datetime.now().strftime("%Y/%m/%d")
                                            })
            return {
              'statusCode': 200,
              'body': json.dumps(response)
            }
