AWSTemplateFormatVersion: 2010-09-09
Description: >
  Aws infrastructure for r studio hosting on Ec2. This is built in accordance with best practices, which 
  uses NAT Gateway. The actual deployment uses an Ec2 to serve as a NAT instance. 
  Ref: https://docs.aws.amazon.com/vpc/latest/userguide/work-with-nat-instances.html
   
  Written by - Jeremy Ng (Contact at jeremy.ng.w.k@sgh.com.sg/jeremy.ng.wk@duke-nus.edu.sg)
  in consultation with Eugene Ng (contact at eugenelq@amazon.c√üom).

Parameters:
  AnalysisBucketArn:
    Description: Analysis bucket ARN.
    Type: String
    Default: arn:aws:s3:::analysis-ap-southeast-1-wkj24002
  InputBucketArn:
    Description: Input bucket ARN.
    Type: String
    Default: arn:aws:s3:::inputs-ap-southeast-1-asadsdsf-wkj24002
  OutputBucketArn:
    Description: Output bucket ARN.
    Type: String
    Default: arn:aws:s3:::outputs-ap-southeast-1-wkj24002
  EbsVolumeSize:
    Description: Size of the EBS volume in GB
    Type: Number
    Default: 500
  EC2InstanceTag:
    Description: Name of the EC2 instance
    Type: String
    Default: RStudio-dev
  LatestAmiId:
    Description: AMI Id to be used for EC2 instance
    Type: String
    Default: ami-061a07f14f65f7676
  PolicyArn:
    Description: Policy ARN to be attached to the EC2 instance with permissions to Ec2
    Type: String
    Default: arn:aws:iam::009160053326:policy/EC2AccessToS3Buckets-ap-southeast-1
  InstanceType:
    Type: String
    Default: r6a.2xlarge
    AllowedValues:
      - t2.micro
      - t2.medium
      - r6a.xlarge
      - r6a.2xlarge
      - r6a.4xlarge
      - r6a.8xlarge
      - r6a.12xlarge
      - r6a.16xlarge
      - r6a.24xlarge
      - r6a.32xlarge
      - r6a.48xlarge
      - x2idn.16xlarge
      - x2idn.32xlarge
      - x2iedn.24xlarge
      - x2iedn.32xlarge
Resources:
  # Vpc & networking
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Primary Vpc
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: IGW-primary
  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # create the subnets - 2 private & 2 public subnets.
  # public subnets are associated with the internet gateway
  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "PublicSubnet1"
  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "PublicSubnet2"
  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.3.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: "PrivateSubnet1"
  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.4.0/24"
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: "PrivateSubnet2"

  # nat gateway
  NatGatewayEIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: "PrimaryNatGatewayEIP"
  NatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: "NatGateway"

  # route tables & association of subnets with route tables
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "PublicRouteTable"
  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "PrivateRouteTable"

  PublicSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # private subnet routes to the nat gateway while public subnet routes
  # igw.
  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
  PrivateRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway

  # security group
  # application load balancer:
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/
  # example-templates-autoscaling.html
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
        - Key: Resource
          Value: SecurityGroups
        - Key: Name
          Value: alb-sg
      VpcId: !Ref VPC
      GroupDescription: Security group for ALB to access R-studio Ec2 server
      GroupName: alb-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8787
          ToPort: 8787
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  RstudioSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security group for HTTP access from port 8787 (R-studio)
      GroupName: rstudio-sg
      Tags:
        - Key: Name
          Value: rstudio-sg
      SecurityGroupIngress:
        - IpProtocol: -1
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId

  # user groups
  RstudioUsers:
    Type: AWS::IAM::Group
    Properties:
      GroupName: RstudioUsers
      Policies:
        - PolicyName: !Sub "RstudioUsersPolicy-${AWS::Region}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeTags
                  - ec2:DescribeInstanceStatus
                Resource: "*"
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource:
                  - "*"

  # roles
  LambdaEC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaEC2StartStopRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaEC2StartStopPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:StartInstances
                  - ec2:StopInstances
                Resource: arn:aws:ec2:*:*:instance/*
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeTags
                  - ec2:DescribeInstanceStatus
                Resource: "*"
  EC2InstancesIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "EC2InstancesIamRole-${AWS::Region}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - !Ref PolicyArn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole

  # event bridge rules
  AutoStopEC2Rule:
    Type: AWS::Events::Rule
    Properties:
      Name: EC2AutoStopEndOfDayRule
      Description: Auto Stop EC2 Instance (Mon-Fri 00:00 AM GMT)
      ScheduleExpression: cron(0 16 ? * MON-SUN *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt AutoStopEC2Lambda.Arn
          Id: AutoStopEC2Lambda

  # application load balancer
  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: "200"
      Name: EC2TargetGroup
      Port: 8787
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "20"
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC
      Targets:
        - Id: !Ref EC2Instance
          Port: 8787
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId

  S3VpcEndPoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Gateway
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - "s3:*"
            Resource:
              - "*"
      RouteTableIds:
        - !Ref PrivateRouteTable
        - !Ref PublicRouteTable

  # EC2
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "EC2InstanceProfile-${AWS::Region}"
      Roles:
        - !Ref EC2InstancesIamRole

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref EbsVolumeSize
            VolumeType: gp2
            DeleteOnTermination: False
      SecurityGroupIds:
        - !GetAtt RstudioSecurityGroup.GroupId
      SubnetId: !Ref PrivateSubnet1
      Tags:
        - Key: Name
          Value: !Ref EC2InstanceTag
        - Key: R version
          Value: 4.4.1
        - Key: Rstudio version
          Value: 2024.04.2
        - Key: AutoStop
          Value: True
        - Key: O.S
          Value: Ubuntu 22.04
        - Key: AMI
          Value: !Ref LatestAmiId
  # Resources for automated start/stop of EC2 instances using EventBridge + Lambda integration.
  # Edited from https://github.com/aws-samples/aws-cfn-save-costs-auto-start-stop-ec2/
  # blob/main/cfn_auto_start_stop_ec2/cfn_auto_start_stop_ec2.yaml
  # Lambda permissions
  AutoStopEC2LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AutoStopEC2Lambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt AutoStopEC2Rule.Arn

  # lambda functions to start and stop EC2 instances
  AutoStopEC2Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "Autostop-Ec2-instance-${AWS::Region}"
      Runtime: python3.9
      MemorySize: 128
      Role: !GetAtt LambdaEC2Role.Arn
      Handler: index.lambda_handler
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import logging
          import os

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          region = os.environ['AWS_REGION']
          ec2 = boto3.resource('ec2', region_name=region)

          def lambda_handler(event, context):

              filters = [
                  {
                      'Name': 'tag:AutoStop',
                      'Values': ['TRUE','True','true']
                  },
                  {
                      'Name': 'instance-state-name',
                      'Values': ['running']
                  }
              ]

              instances = ec2.instances.filter(Filters=filters)
              RunningInstances = [instance.id for instance in instances]
              print("Running Instances with AutoStop Tag : " + str(RunningInstances))

              if len(RunningInstances) > 0:
                  for instance in instances:
                      if instance.state['Name'] == 'running':
                          print("Stopping Instance : " + instance.id)
                  AutoStopping = ec2.instances.filter(InstanceIds=RunningInstances).stop()
                  print("Stopped Instances : " + str(RunningInstances))
              else:
                  print("Instance not in Running state or AutoStop Tag not set...")
      Description: >-
        Auto Stop EC2 Instance (from tag : AutoStop)

Outputs:
  AlbDNS:
    Description: DNS of the ALB for access to R-studio
    Value: !GetAtt ApplicationLoadBalancer.DNSName
